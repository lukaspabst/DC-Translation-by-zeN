import discord
import openai
import requests
import os
from dotenv import load_dotenv

load_dotenv()


# Coded by zeN

class TranslationBot(discord.Client):

  def __init__(self, *args, **kwargs):
    intents = discord.Intents.default()
    intents.reactions = True
    super().__init__(intents=intents, *args, **kwargs)
    self.reaction_flags = {
      'ðŸ‡ºðŸ‡¸': 'en',
      'ðŸ‡¨ðŸ‡³': 'zh-cn',
      'ðŸ‡­ðŸ‡°': 'zh-hk',
      'ðŸ‡ªðŸ‡¸': 'es',
      'ðŸ‡§ðŸ‡©': 'bn',
      'ðŸ‡³ðŸ‡¬': 'pcm',
      'ðŸ‡µðŸ‡°': 'pa',
      'ðŸ‡·ðŸ‡º': 'ru',
      'ðŸ‡¯ðŸ‡µ': 'ja',
      'ðŸ‡©ðŸ‡ª': 'de',
      'ðŸ‡ºðŸ‡¦': 'uk',
      'ðŸ‡¹ðŸ‡·': 'tr',
      'ðŸ‡«ðŸ‡·': 'fr',
      'ðŸ‡®ðŸ‡¹': 'it',
      'ðŸ‡µðŸ‡­': 'tl',
      'ðŸ‡»ðŸ‡³': 'vi',
      'ðŸ‡°ðŸ‡·': 'ko',
      'ðŸ‡µðŸ‡±': 'pl',
      'ðŸ‡·ðŸ‡´': 'ro',
      'ðŸ‡³ðŸ‡µ': 'ne',
      'ðŸ‡²ðŸ‡²': 'my',
      'ðŸ‡³ðŸ‡±': 'nl',
      'ðŸ‡¸ðŸ‡¦': 'ar',
      'ðŸ‡«ðŸ‡®': 'fi',
      'ðŸ‡¨ðŸ‡¦': 'fr-ca',
      'ðŸ‡¨ðŸ‡¿': 'cs',
      'ðŸ‡²ðŸ‡³': 'mn',
      'ðŸ‡¬ðŸ‡§': 'en-gb',
      'ðŸ‡³ðŸ‡´': 'no',
      'ðŸ‡¸ðŸ‡ª': 'sv',
      'ðŸ‡ºðŸ‡¾': 'ur',
      'ðŸ‡®ðŸ‡·': 'fa',
      'ðŸ‡¬ðŸ‡·': 'el',
      'ðŸ‡¨ðŸ‡­': 'de-ch',
      'ðŸ‡¦ðŸ‡ª': 'ar-ae',
      'ðŸ‡§ðŸ‡·': 'pt',
      'ðŸ‡©ðŸ‡¿': 'ar-dz',
      'ðŸ‡®ðŸ‡³': 'hi',
      'ðŸ‡µðŸ‡¹': 'pt-pt',
      'ðŸ‡­ðŸ‡·': 'hr',
      'ðŸ‡®ðŸ‡ª': 'ga',
      'ðŸ‡©ðŸ‡°': 'da',
      'ðŸ‡±ðŸ‡°': 'si',
      'ðŸ‡¸ðŸ‡°': 'sk',
      'ðŸ‡¸ðŸ‡®': 'sl',
      'ðŸ‡§ðŸ‡ª': 'nl-be'
    }

  async def on_ready(self):
    print(f'Logged in as {self.user.name} ({self.user.id})')
    print('------')

  async def on_reaction_add(self, reaction, user):
    if user.bot:
      return

    if reaction.message.author.name == "Translation by zeN":
      return

    print("on_reaction_add called!")
    if reaction.emoji not in self.reaction_flags:
      print("on_reaction_add emoji not in reaction.flags!")
      return

    print(f'Received reaction {reaction.emoji} from user {user.name}')
    print(f'reaction: {reaction.message}')
    message = await reaction.message.channel.fetch_message(reaction.message.id)
    print(f'Message: {message.content}')
    if not message.content:
      print("Message content is empty!")
      return

    content = message.content
    print(self.reaction_flags[reaction.emoji])
    translation = self.translate(content, self.reaction_flags[reaction.emoji])
    translated_content = translation
    print(f'Translated message from {content} to {translated_content}')

    # Create a Discord embed with the gradient as the border color
    embed = discord.Embed(
      title=f'**Author:** {message.author.name}',
      description=
      f'\n\n**Original Message:**\n{content[:20]}{"..." if len(content) > 20 else ""}\n\n**Translation:**\n{translated_content}\n\n',
      color=discord.Color.from_rgb(26, 188, 156))

    # Send the embed to a Discord channel
    await message.channel.send(embed=embed, delete_after=60)

  def translate(self, text, target_language):

    try:
      endpoint = "https://translate.googleapis.com/translate_a/single"
      params = {
          "client": "gtx",
          "sl": "auto",
          "tl": target_language,
          "dt": "t",
          "q": text
      }
      response = requests.get(endpoint, params=params)
      translation = response.json()[0][0][0]

      # remove leading special characters and whitespace
      while translation and (translation[0].isspace()
                             or not translation[0].isalnum()):
        translation = translation[1:]

      return translation

    except Exception as e:
      print(f"Translation failed: {e}")
      return None


client = TranslationBot()
client.run(os.getenv('DISCORD_TOKEN'))
